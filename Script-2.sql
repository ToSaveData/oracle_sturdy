SELECT COUNT(*), SUM(SALARY)
FROM EMPLOYEES ; 

SELECT COUNT(*), sum(SALARY), avg(SALARY)
FROM EMPLOYEES;

SELECT COUNT(*), sum(SALARY), avg(nvl(SALARY, 0))
FROM EMPLOYEES;

SELECT COUNT(*), max(SALARY), min(SALARY) 
FROM EMPLOYEES; 

SELECT avg(e.SALARY)
FROM EMPLOYEES e 
ORDER BY DEPARTMENT_ID ;  		--ORDER by는 셀렉트가 끝난 다음에 하기 때문에 여기서는 의미가 없음

SELECT e.DEPARTMENT_ID, avg(e.SALARY)
FROM EMPLOYEES e 
group BY e.DEPARTMENT_ID --집계함수와 함께 쓰면 유용
ORDER BY DEPARTMENT_ID ;

SELECT DEPARTMENT_ID , JOB_ID , COUNT(*), sum(SALARY) 
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID , JOB_ID 
ORDER BY 1;

SELECT DEPARTMENT_ID , count(*), sum(SALARY)
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID
HAVING sum(SALARY) >= 20000	--GROUP BY 다음에 having을 사용해서 조건을 붙일 수 있음
AND DEPARTMENT_ID = 100;
--WHERE SALARY >= 20000; -- GROUP by와 where를 함께 쓸 수 없음.

--예제1
SELECT max(SALARY) AS 최고임금, min(SALARY) AS 최저임금, (max(SALARY) - MIN(SALARY)) "최고임금-최저임금"
FROM EMPLOYEES e ;

--예제2
SELECT TO_CHAR(max(HIRE_DATE), 'yyyy"년" mm"월" dd"일" ')
FROM EMPLOYEES e 

--예제3
SELECT DEPARTMENT_ID , AVG(SALARY) , max(SALARY), min(SALARY)
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID DESC;

--예제4
SELECT JOB_ID ,avg(SALARY), max(SALARY), min(SALARY)
FROM EMPLOYEES e 
GROUP BY JOB_ID 
ORDER BY JOB_ID DESC;

--예제5
SELECT TO_CHAR(min(HIRE_DATE), 'yyyy"년" mm"월" dd"일"')
FROM EMPLOYEES e ;

--예제6
SELECT DEPARTMENT_ID AS 부서, avg(SALARY) AS 평균임금, min(SALARY) AS 최저임금, avg(SALARY) - min(SALARY) "평균임금 - 최저임금"
FROM EMPLOYEES e
GROUP BY DEPARTMENT_ID 
HAVING avg(SALARY) - min(SALARY) < 2000
ORDER BY 4 DESC;

--예제7
SELECT JOB_ID,  max(SALARY) - min(SALARY) "최고임금 - 최저임금"
FROM EMPLOYEES 
GROUP BY JOB_ID 
ORDER BY 2 desc;

SELECT EMPLOYEE_ID ,
	   SALARY,
	   JOB_ID, 
	   CASE WHEN JOB_ID = 'AC_ACCOUNT' THEN SALARY + SALARY * 0.1
	   		WHEN JOB_ID = 'AC_MGR' THEN SALARY + SALARY * 0.2
	   		ELSE SALARY
	   END SALARY	-- 열의 이름
FROM EMPLOYEES;

SELECT FIRST_NAME,
	   DEPARTMENT_ID,
	   CASE WHEN DEPARTMENT_ID <= 150 AND DEPARTMENT_ID >= 110 THEN 'C-TEAM'
	   		WHEN DEPARTMENT_ID <= 100 AND DEPARTMENT_ID >= 60  THEN 'B-TEAM'
	   		WHEN DEPARTMENT_ID <= 50 AND DEPARTMENT_ID >= 10  THEN 'A-TEAM'
	   		ELSE '팀 없음'
   	   END "TEAM"	-- 열의 이름
FROM EMPLOYEES
ORDER BY team;

SELECT FIRST_NAME , em.DEPARTMENT_ID ,
	   DEPARTMENT_name, de.DEPARTMENT_ID 
FROM EMPLOYEES em, DEPARTMENTS de
WHERE em.DEPARTMENT_ID = de.DEPARTMENT_ID 

SELECT FIRST_NAME , e.JOB_ID 
	   job_title, j.JOB_ID 
FROM EMPLOYEES e, JOBS j 
WHERE e.JOB_ID = j.JOB_ID; 

SELECT FIRST_NAME, e.DEPARTMENT_ID, e. JOB_ID 
	   DEPARTMENT_name, d.DEPARTMENT_ID,
	   job_title, j.JOB_ID 
FROM EMPLOYEES e , DEPARTMENTS d , JOBS j 
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID AND e.JOB_ID = j.JOB_ID 

SELECT emp.FIRST_NAME , mgr.FIRST_NAME 
FROM EMPLOYEES emp, EMPLOYEES mgr 
WHERE emp.MANAGER_ID = mgr.EMPLOYEE_ID(+); 

SELECT e.DEPARTMENT_ID "e-id", e.FIRST_NAME "e-name", d.DEPARTMENT_NAME "d-name" 
FROM EMPLOYEES e LEFT OUTER JOIN DEPARTMENTS d 
	 ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;
	 
SELECT e.DEPARTMENT_ID "e-id", e.FIRST_NAME "e-name", d.DEPARTMENT_NAME "d-name"
FROM EMPLOYEES e , DEPARTMENTS d 
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID (+);

SELECT e.DEPARTMENT_ID "e-id", e.FIRST_NAME "e-name", d.DEPARTMENT_NAME "d-name" 
FROM EMPLOYEES e right OUTER JOIN DEPARTMENTS d 
	 ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;
	 
SELECT e.DEPARTMENT_ID "e-id", e.FIRST_NAME "e-name", d.DEPARTMENT_NAME "d-name"
FROM EMPLOYEES e , DEPARTMENTS d 
WHERE e.DEPARTMENT_ID(+) = d.DEPARTMENT_ID ;

SELECT e.DEPARTMENT_ID, e.FIRST_NAME, d.DEPARTMENT_NAME 
FROM EMPLOYEES e FULL OUTER JOIN DEPARTMENTS d 
	 ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;
	
--예제1
SELECT emp.EMPLOYEE_ID, emp.FIRST_NAME, d.DEPARTMENT_NAME 
FROM EMPLOYEES emp, EMPLOYEES mgr,DEPARTMENTS d 
WHERE emp.MANAGER_ID = mgr.EMPLOYEE_ID 
AND emp.DEPARTMENT_ID = d.DEPARTMENT_ID 
	
--예제2
SELECT r.REGION_NAME, c.COUNTRY_NAME 
FROM COUNTRIES c, REGIONS r 
WHERE c.REGION_ID = r.REGION_ID 
ORDER BY 1 desc, 2 DESC;

--예제3
SELECT d.DEPARTMENT_ID, d.DEPARTMENT_NAME, emp.FIRST_NAME, l.CITY, c.COUNTRY_NAME, r.REGION_NAME
FROM DEPARTMENTS d, EMPLOYEES emp, LOCATIONS l, COUNTRIES c, REGIONS r  
where d.MANAGER_ID = mgr.EMPLOYEE_ID 
AND   d.DEPARTMENT_ID = EMP.DEPARTMENT_ID
AND   l.LOCATION_ID = d.LOCATION_ID
AND   l.COUNTRY_ID = c.COUNTRY_ID
AND   r.REGION_ID = c.REGION_ID

SELECT d.DEPARTMENT_ID, d.DEPARTMENT_NAME, e.FIRST_NAME, l.CITY, c.COUNTRY_NAME, r.REGION_NAME
FROM DEPARTMENTS d, EMPLOYEES e, LOCATIONS l, COUNTRIES c, REGIONS r  
where d.MANAGER_ID = e.EMPLOYEE_ID 
AND   d.LOCATION_ID = l.LOCATION_ID
AND   l.COUNTRY_ID = c.COUNTRY_ID
AND   c.REGION_ID = r.REGION_ID;


--예제4
SELECT e.EMPLOYEE_ID, 
	   e.LAST_NAME || ' ' || e.FIRST_NAME,
	   jh.JOB_ID, e.JOB_ID 
FROM JOB_HISTORY jh, 
	 JOBS j, 
	 EMPLOYEES e  
WHERE jh.JOB_ID = 'AC_ACCOUNT'
	  AND   jh.EMPLOYEE_ID = e.EMPLOYEE_ID
	  AND   e.JOB_ID != 'AC_ACCOUNT'
	  AND   j.JOB_ID = jh.JOB_ID ;

--예제5
SELECT *
FROM 
	EMPLOYEES e, 
	DEPARTMENTS d 
WHERE 
	e.DEPARTMENT_ID = d.DEPARTMENT_ID (+);

--예제6
SELECT emp.EMPLOYEE_ID, emp.LAST_NAME, emp.HIRE_DATE
FROM 
	EMPLOYEES emp,
	EMPLOYEES mgr
WHERE 
	emp.HIRE_DATE < MGR.hire_date
	AND emp.MANAGER_ID = mgr.EMPLOYEE_ID ;
	